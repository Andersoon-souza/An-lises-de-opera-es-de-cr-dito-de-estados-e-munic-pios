# -*- coding: utf-8 -*-
"""base_credito_datavikings.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qh6njGUUaN6Wqb4oDrAL5Be3MW5Lej1H

# **Análises de operações de crédito de estados e municípios**

A contratação de operações de crédito por Estados, Distrito Federal e Municípios, incluindo suas autarquias, fundações e empresas estatais dependentes , subordina-se às normas da Lei de Responsabilidade Fiscal (LRF) e das Resoluções do Senado Federal 40/2001 e 43/2001. Os entes subnacionais ou suas empresas estatais não dependentes submetem à Secretaria do Tesouro Nacional (STN) ou à instituição financeira credora um pedido de verificação de limites e condições (PVL) para contratação dessas operações. Para mais informações, acesse o Manual para Instrução de Pleitos (MIP), disponível em https://tesourotransparente.gov.br/mip.

### **Preparação do ambiente:**
"""

# Instala a biblioteca do python para gerar PDFs direto do notebook;
!pip install FPDF

# Importe das bibliotecas que serão utilizadas:
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from fpdf import FPDF

# Avisos
import warnings
warnings.filterwarnings('ignore')

# Ajustes de casas decimais no pandas:
pd.options.display.float_format = '{:,.2f}'.format

# Layout do seaborn:
sns.set_theme( style='whitegrid')

"""###**Importando a base de dados:**"""

base = pd.read_csv('Base_Dados - Operacoes Uniao.csv', encoding='latin1', sep=';')
base.head()

print("Linhas: ", base[base.columns[0]].count())
print("Colunas: ", base.shape[1])

"""**Dicionário de variáveis:**

*   **Interessado:** Nome do ente da Federação ou da empresa estatal interessada no PVL.
*   **UF:** Unidade da Federação do ente da Federação ou da empresa estatal interessada no PVL.
*   **Tipo de interessado:** Tipo de interessado no PVL: estado, município ou empresa estatal.
*   **Tipo de operação:** Tipo da operação de crédito ou concessão de garantia.
*   **Finalidade:** Finalidade da operação de crédito ou concessão de garantia.
*   **Tipo de credor:** Tipo de credor da operação de crédito ou concessão de garantia.
*   **Credor:** Nome do credor da operação de crédito ou concessão de garantia.
*   **Moeda:** Moeda em que será contratada a operação de crédito ou a concessão de garantia.
*   **Valor:** Valor da operação de crédito ou da concessão de garantia, na moeda de contratação.
*   **Número do Processo/PVL:** Nº do processo do Ministério da Economia relacionado ao PVL ou, se não houver processo, seu código de
identificação no SADIPEM.

*   **Código IBGE:** Código IBGE do ente da Federação interessado no PVL. Se o interessado por empresa estatal, esse campo
é vazio
*   **Status:** Etapa em que se encontra o PVL.
*   **Data:** Data em que o PVL foi movimentado no SADIPEM para seu status atual.
*   **Analisado por :** Indica se a análise do PVL é de competência da STN ou da instituição financeira credora, nos termos do
art. 10 da LC 148/2014.

### **Tratamento dos dados:**
"""

base.info()

# Criando uma cópia da base original
base_credito = base

# Observando a quantidade de dados faltantes na base de dados:
base_credito.isnull().sum()

"""Os valores nulos aqui são referentes a emprestimos efetuados por empresas estatais conforme indicado no dicionário de variáveis. Portanto, não precisamos nos preocupar."""

# Visualizando as colunas:
base_credito.columns

# Retirando os espaços dos nomes da
base_credito.columns = [ Loop.replace(' ', '_') for Loop in base_credito.columns ]
base_credito.columns

base_credito.dtypes

# Loop tratando pontuação e datatype da coluna 'Valor':
base_credito.Valor = base_credito.Valor.apply( lambda Loop : Loop.replace('.', '') )
base_credito.Valor = base_credito.Valor.apply( lambda Loop : Loop.replace(',', '.') )
base_credito.Valor = pd.to_numeric( base_credito.Valor )

base_credito.Valor.head()

# ajustando a coluna de data:
base_credito.Data = pd.to_datetime(base_credito.Data)

base_credito.head()

# Campos unicos:
base_credito.nunique()

# enriquecimento:

# Dicionario De Para
uf_to_regiao = {
    'AC': 'Norte',
    'AL': 'Nordeste',
    'AM': 'Norte',
    'AP': 'Norte',
    'BA': 'Nordeste',
    'CE': 'Nordeste',
    'DF': 'Centro-Oeste',
    'ES': 'Sudeste',
    'GO': 'Centro-Oeste',
    'MA': 'Nordeste',
    'MG': 'Sudeste',
    'MS': 'Centro-Oeste',
    'MT': 'Centro-Oeste',
    'PA': 'Norte',
    'PB': 'Nordeste',
    'PE': 'Nordeste',
    'PI': 'Nordeste',
    'PR': 'Sul',
    'RJ': 'Sudeste',
    'RN': 'Nordeste',
    'RO': 'Norte',
    'RR': 'Norte',
    'RS': 'Sul',
    'SC': 'Sul',
    'SE': 'Nordeste',
    'SP': 'Sudeste',
    'TO': 'Norte'
}

base_credito['Região'] = base_credito.UF.map(uf_to_regiao)
base_credito.head()

# Gerando as colunas de datas:
base_credito['Ano'] = base_credito.Data.dt.year
base_credito['Mes'] = base_credito.Data.dt.month
base_credito['Dia'] = base_credito.Data.dt.day
base_credito.head()

# Describe
base_credito.describe(include='all').transpose()

"""### **Análises descritivas**"""

base_credito.columns

# Concentração de pedidos por cidade, valores acumulativos:
base_credito.Interessado.value_counts(normalize=True).cumsum()

# Concentração por UF, valores em percentual:
base_credito.UF.value_counts(normalize=True)

# Concentração por região, valores em percentual:
base_credito.Região.value_counts(normalize=True)

#Concentração por tipo interessado, em valores absolutos:
base_credito.Tipo_de_interessado.value_counts()

# Emprestimos solicitados por empresas estatáis:
base_credito.loc[ base_credito.Tipo_de_interessado == 'Empresa Estatal' ]

# Tipo de operação
base_credito.Tipo_de_operação.value_counts()

# Finalidade do empréstimo, valores acumulados:
pd.DataFrame( base_credito.Finalidade.value_counts( normalize=True ).cumsum() ).head(10)

# Credor do empréstimo:
base_credito.Tipo_de_credor.value_counts()

# Credor do empréstimo, valores acumulados:
base_credito.Credor.value_counts(normalize=True).cumsum().head(15)

# Status da solicitação do empréstimo:
base_credito.Status.value_counts( normalize=True ).cumsum()

# Número de solicitações por ano:
base_credito.Ano.value_counts().sort_index()

# Filtros Status
Filtro_Status = ['Deferido', 'Deferido (PVL-IF)', 'Regularizado']

Base_Concesao = base_credito.loc[ base_credito.Status.isin(Filtro_Status)]
Base_Concesao.shape

# Entender Por UF
# Quantidade de emprestimos
# Total Liberado
# Ticker médio

Anl_1 = Base_Concesao[(Base_Concesao.Tipo_de_interessado == 'Estado') & (Base_Concesao.Ano >=2014)].groupby(by=['Região', 'Interessado']).agg(
    Quantidade = ('Interessado', 'count'),
    Total_Liberado = ('Valor', 'sum'),
    Ticket_Medio = ('Valor', 'median')
).reset_index()

Anl_1



#Atribuindo um tema para os gráficos que serão utilizados:
sns.set_theme(style="whitegrid")

# Definindo a paleta de cores
Paleta = ['#183FFE', '#00D100', '#FFD000','#FE0002', '#f5f5f5']
sns.palplot( Paleta )
plt.title('Ministério da Fazenda - paleta de cores', loc='left',fontfamily='serif',fontsize=15, y=1.2);

Anl_Emprestimo = base_credito.groupby( by='Ano').agg(Sum =('Valor', 'sum') ).tail(8) / 10 ** 9 # calculo passando para bilhões, facilitando a leitura do gráfico.
Anl_Emprestimo

# Tamanho da figura
fig, ax = plt.subplots(figsize=(12, 5))

# Título e subtítulo
fig.text(0.09, 1, 'Investindo no Progresso: Evolução Anual dos Pedidos de Empréstimos Municipais/UFs', fontsize=15, fontweight='bold', fontfamily='serif')
fig.text(0.09, 0.95, 'Análise das Tendências e Necessidades de Financiamento ao Longo dos Anos.', fontsize=12, fontweight='light', fontfamily='serif');

# Gráfico de barras
bars = ax.bar(
    Anl_Emprestimo.index, Anl_Emprestimo.Sum,
    width=0.5, edgecolor='darkgray', linewidth=1.6, color=Paleta[3]
)

# Remover todas as spines (bordas)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['bottom'].set_visible(False)
ax.spines['left'].set_visible(False)

# Linha horizontal no eixo y=0
ax.axhline( y=0, color='black', linewidth=5.3, alpha=0.7)

# Configurar grid apenas no eixo y
ax.grid(axis='y', linestyle='-', alpha=0.4)
ax.grid(axis='x', alpha=0)

# Adicionar rótulo ao eixo y
ax.set_ylabel('Valores em bilhões (bi)', size=10)

# Configurar o tamanho das marcas dos eixos
ax.tick_params(axis='both', which='major', labelsize=12)

# Adicionar os valores em cima das barras
# Iterando sobre cada barra do gráfico
for bar in bars:

    # Obtendo a altura da barra atual
    height = bar.get_height()

    # Adicionando uma anotação (valor da barra) no topo de cada barra
    ax.annotate(
        # Formato do texto: 'R$' seguido do valor da barra com separadores de milhares e uma casa decimal
        'R$ {:,.1f}'.format(height),
        # Posição da anotação: centro da barra
        xy=(bar.get_x() + bar.get_width() / 2, height),
        # Deslocamento vertical e horizontal da anotação
        xytext=(0, 3),
        # Especificando o sistema de coordenadas do deslocamento da anotação
        textcoords="offset points",
        # Alinhamento horizontal e vertical do texto
        ha='center', va='bottom',
        # Tamanho da fonte do texto
        fontsize=10,
        # Peso da fonte (leve)
        fontweight='light',
        # Família da fonte (serif)
        fontfamily='serif'
    )

# insiths
fig.text(
    0.09, -0.1,
    '''
    Considerando a tendência de crescimento observada nos últimos anos,
    há uma perspectiva de que o volume de pedidos de empréstimo para o ano de 2024 não ultrapasse o registrado em 2017,
    que foi o maior da série histórica até o momento
    ''',
    fontsize=10, fontweight='light', fontfamily='serif'
)

plt.savefig('Analise-Anual.png', dpi=500, bbox_inches='tight');

# Volta para a base de CREDITO -- TIRa da Conecesão
Anl_Moeda_UF = base_credito.groupby( by=['Região', 'Moeda'] ).agg( Valor = ('Valor', 'sum') ).reset_index()

# DF Vazio
Coluna = pd.DataFrame()

# Loop para calcular os %
for Loop in Anl_Moeda_UF.Região.unique():
  Total = Anl_Moeda_UF[ Anl_Moeda_UF.Região == Loop ].Valor.sum()
  Fracao = Anl_Moeda_UF[ Anl_Moeda_UF.Região == Loop ].Valor / Total
  Coluna = pd.concat([Coluna, Fracao.reset_index()])

Anl_Moeda_UF['%'] = Coluna.Valor.values
Anl_Moeda_UF.head()

Tab_Cruzada = Anl_Moeda_UF.pivot_table( index='Região', columns='Moeda', values='%' )
Tab_Cruzada.drop( columns='Direito Especial - SDR', inplace=True )
Tab_Cruzada.columns = ['Dólar', 'Euro', 'Iene', 'Real']
Tab_Cruzada.head()

# Criando o gráfico de barras horizontais empilhadas
fig, ax = plt.subplots( figsize=(10, 5) )

# Acumulando valores para empilhar
bottom = np.zeros( len(Tab_Cruzada) )

# Adicionando cada coluna ao gráfico
for i, column in enumerate(Tab_Cruzada.columns):
    ax.barh( Tab_Cruzada.index, Tab_Cruzada[column], left=bottom, color=Paleta[i], label=column, height=0.8 )
    bottom += Tab_Cruzada[column].fillna(0)

# Adicionando título e rótulos
fig.text(0.09, 1, 'Distribuição Percentual de Empréstimos por Região e Moeda', fontsize=15, fontweight='bold', fontfamily='serif')
fig.text(0.09, 0.95, 'Análise das preferências regionais por diferentes moedas nos pedidos de empréstimo', fontsize=12, fontweight='light', fontfamily='serif')

# Remover todas as spines (bordas)
for Loop in ['top', 'left', 'right', 'bottom']:
    ax.spines[Loop].set_visible(False)

# Configurar grid apenas no eixo y
ax.grid(axis='y', alpha=0)
ax.grid(axis='x', alpha=0)

ax.set_xlim(0, 1)
ax.set_xticks([])

ax.tick_params(axis='both', which='major', labelsize=10)
ax.tick_params(axis=u'both', which=u'both',length=0)

# Legenda criativa
fig.text(0.75, 0.02, 'Dólar', fontweight='bold', fontfamily='serif', fontsize=12, color=Paleta[0] )
fig.text(0.81, 0.02, '|', fontweight='bold', fontfamily='serif', fontsize=12, color='darkgray')
fig.text(0.82, 0.02, 'Euro', fontweight='bold', fontfamily='serif', fontsize=12, color=Paleta[1] )
fig.text(0.87, 0.02, '|', fontweight='bold', fontfamily='serif', fontsize=12, color='darkgray')
fig.text(0.88, 0.02, 'Iene', fontweight='bold', fontfamily='serif', fontsize=12, color=Paleta[2] )
fig.text(0.925, 0.02, '|', fontweight='bold', fontfamily='serif', fontsize=12, color='darkgray')
fig.text(0.94, 0.02, 'Real', fontweight='bold', fontfamily='serif', fontsize=12, color=Paleta[3] )

# Numeros DOLAR
for i in Tab_Cruzada.index:
    ax.annotate(
        f" {round(Tab_Cruzada['Dólar'][i]*100,1)}%",
        xy=(Tab_Cruzada['Dólar'][i]/2, i),
        va = 'center', ha='center',
        fontsize=12, fontweight='bold', fontfamily='serif',
        color='white' )

# Numeros IENE
for i in Tab_Cruzada.index:
    ax.annotate(
        f" {round(Tab_Cruzada['Iene'][i]*100,1)}%",
        xy=( Tab_Cruzada['Dólar'][i]/2 + Tab_Cruzada['Iene'][i]/2 + 0.04, i),
        va = 'center', ha='center',
        fontsize=12, fontweight='bold', fontfamily='serif',
        color='white' )

# Numeros REAL
for i in Tab_Cruzada.index:
    ax.annotate(
        f" {round(Tab_Cruzada['Real'][i]*100,1)}%",
        xy=(Tab_Cruzada['Dólar'][i]/2++Tab_Cruzada['Iene'][i]/2+Tab_Cruzada['Real'][i]/2, i),
        va = 'center', ha='center',
        fontsize=12, fontweight='bold', fontfamily='serif',
        color='white' )

# Ajustando layout
plt.tight_layout()

# insiths
fig.text(
    0.09, -0.2,
    '''
    Cada região tem seu preferência de moeda para pedidos de emprestimos.
    Às vezes, os empréstimos denominados em ienes podem ter taxas de juros mais baixas,
    em comparação com outras moedas, como o dólar ou o euro.

    ''',
    fontsize=10, fontweight='light', fontfamily='serif'
);

#fig.subplots_adjust(left=0.1)
fig.subplots_adjust(right=0.95)

plt.savefig('Analise-percentual.png', dpi=400, bbox_inches='tight');

Anl_TOP_Finalidades = base_credito[ base_credito.Ano >= 2017 ].Finalidade.value_counts( normalize=True ).head(10)
for Loop in Anl_TOP_Finalidades.index:
  print( Loop )

Anl_TOP_Finalidades.index = ['Infraestrutura', 'Aquisição equipamentos', 'Multissetorial', 'Aquisição de terrenos',
'Pró-Transporte', 'Aporte de capital', 'Saneamento básico', 'Desenvolvimento sustentável', 'PMAT', 'PAC 2']

Anl_TOP_Finalidades.sort_values( inplace=True )

fig, ax = plt.subplots( figsize=(12, 5) )

# Adicionando título e rótulos
fig.text(0.12, 0.90, 'Distribuição Percentual das Princiais finalidades dos empréstimos', fontsize=15, fontweight='bold', fontfamily='serif')
fig.text(0.12, 0.85, 'Análise das finalidades que os emprestimos são direcionados', fontsize=12, fontweight='light', fontfamily='serif')

ax.fill_between( Anl_TOP_Finalidades.index, 0, Anl_TOP_Finalidades * 100, color=Paleta[0], alpha=0.9)
ax.axhline(y = 0, color = 'black', linewidth = 1.3, alpha = .7)

for s in ['top', 'right','bottom','left']:
    ax.spines[s].set_visible(False)

fig.text(0.13, 0.2, 'Top 10 finalidades (92%)', fontweight="bold", fontfamily='serif', fontsize=12, color=Paleta[3])

ax.yaxis.tick_right()

ax.grid(False)
ax.set_xlim([0, 9])
plt.xticks(rotation=35, fontsize=9 )
plt.yticks( np.arange(0, 70, 25) )

ax.tick_params(axis=u'both', which=u'both',length=0);

# insiths
fig.text(
    0.11, 0.51,
    '''
    O Brasil capta grande parte dos empréstimos para direcionar infraestrutura,
    A infraestrutura é relativamente robusta em algumas áreas,
    como a produção agrícola e o setor de energia,
    além de ter uma extensa rede de comunicação e um setor de telecomunicações em desenvolvimento.


    ''',
    fontsize=10, fontweight='light', fontfamily='serif'
);
plt.savefig('Analise-finalidades.png', dpi=400, bbox_inches='tight');

# Selecionar as finalidades
Lista_Finalidade = list( base_credito.Finalidade.value_counts( normalize=True ).cumsum().head( 10 ).index.values )


Anl_Regiao_Finalidade = base_credito.loc[ base_credito.Finalidade.isin( Lista_Finalidade ) ].groupby(
    by=['Região', 'Finalidade'] ).agg(
        Sum = ('Valor', 'sum') ).reset_index().pivot_table(
            index='Região', columns='Finalidade', values='Sum'
)

Anl_Regiao_Finalidade

Anl_Regiao_Finalidade.rename(
    columns={
      'Aquisição de máquinas, equipamentos e veículos' :   'Aq. de equipamentos',
      'Aquisição de terrenos, imóveis e/ou construção de instalações' : 'Aq. imóveis',
      'Caminho da Escola'      : 'Caminho da Escola',
      'Caminho da Escola 2'     :'Caminho da Escola 2',
      'Infraestrutura'    : 'Infraestrutura',
      'Multissetorial'   : 'Multissetorial',
      'PAC 2 - Pró-Transporte - Pavimentação e Qualificação de Vias'  : 'PAC 2',
      'PMAT' : 'PMAT',
      'Provias': 'Provias',
      'Saneamento básico': 'Saneamento básico'
    }, inplace=True
)

Anl_Regiao_Finalidade

# Reescrever a coluna do DF
for Loop in Anl_Regiao_Finalidade.columns:
  #print( Anl_Regiao_Finalidade[Loop] / 10 ** 9 )
  Anl_Regiao_Finalidade[Loop] = Anl_Regiao_Finalidade[Loop] / 10 ** 9

Anl_Regiao_Finalidade

import matplotlib.colors
cmap = matplotlib.colors.LinearSegmentedColormap.from_list("", ['#f5f5f1', '#FE0002','#00D100'] )

fig, ax = plt.subplots( figsize=(12, 12) )

sns.heatmap(
    Anl_Regiao_Finalidade,
    linewidths=2.5,
    cmap=cmap,
    annot=True,
    fmt='.1f',
    square=True,
    cbar=False,
    annot_kws={"fontsize":12})

ax.spines['top'].set_visible(True)

ax.set_ylabel('')
ax.set_xlabel('')

ax.set_yticklabels(ax.get_yticklabels(), fontfamily='serif', rotation = 0, fontsize=10)
ax.set_xticklabels(ax.get_xticklabels(), fontfamily='serif', rotation=90, fontsize=8)

fig.text( 0.88, .725, 'Finalidade dos pedidos de emprestimos por Região', fontweight='bold', fontfamily='serif', fontsize=15,ha='right')
fig.text( 0.85, 0.7, 'Analisando finalidade por regiao, 80% das finalidades',ha='right', fontsize=12,fontfamily='serif')

# insiths
fig.text(
    0.09, 0.1,
    '''
    Sudeste se destaca em Infraestrutura e Equipamentos,
    Grande parte de todas as regiões têm similaridades quanto aos pedidos de empréstimos.
    ''',
    fontsize=10, fontweight='light', fontfamily='serif'
);

plt.savefig('Analise-finalidades-regiao.png', dpi=400, bbox_inches='tight');

# Classe personalizada para adicionar imagem ao PDF
class PDFWithImage(FPDF):

    def header(self):
        # Titulos
        self.set_font('Arial', '', 16)
        self.cell(0, 10, 'ANALISE EXPLORATÓRIA DE DADOS ', 0, 1, 'c')

        self.set_font('Arial', 'B', 12)
        self.cell(0, 4, 'Python Insights', 0, 1, 'c')

        # Logo
        #self.image('Fundo_Data_Viking - Icon.png', 160, 10, 25)

    def footer(self):
        # Rodapé (opcional)
        self.set_y( -15 )
        self.set_font('Arial', 'I', 8)
        #self.cell(0, 10, f'Página { self.page_no() }', 0, 0, 'C')

# Crie uma instância do PDFWithImage
pdf = PDFWithImage()
pdf.add_page()

# Adicione um descritivo de texto
pdf.set_font('Arial', size=12)

texto = """
Esse relatório refere-se ao cenário de operação de crédito,
solicitada por estados, Distrito Federal e municípios.
"""
pdf.multi_cell(0, 5, texto)
pdf.image("Analise-Anual.png", x=10, y=pdf.get_y() + 5, w=185)

pdf.image("Analise-percentual.png", x=10, y=pdf.get_y() + 120, w=185)

# Pagina 2
pdf.add_page()
pdf.image("Analise-finalidades.png", x=10, y=pdf.get_y() + 10, w=185)

pdf.image("Analise-finalidades-regiao.png", x=10, y=pdf.get_y() + 120, w=185)

#pdf.multi_cell(0, pdf.get_y(), texto)

# Salve o PDF em um arquivo
pdf_file = "Material.pdf"
pdf.output(pdf_file)